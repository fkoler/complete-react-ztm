{"version":3,"file":"static/js/737.aa392294.chunk.js","mappings":"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","sources":["components/button/button.component.tsx","components/button/button.styles.tsx","components/form-input/form-input.styles.tsx","components/form-input/form-input.component.tsx","components/sign-up-form/sign-up-form.styles.tsx","components/sign-up-form/sign-up-form.component.tsx","components/sign-in-form/sign-in-form.styles.tsx","components/sign-in-form/sign-in-form.component.tsx","routes/authentication/authentication.styles.tsx","routes/authentication/authentication.component.tsx"],"sourcesContent":["import { FC, ButtonHTMLAttributes } from 'react';\n\nimport {\n    BaseButton,\n    GoogleSignInButton,\n    InvertedButton,\n    ButtonSpinner,\n} from './button.styles';\n\nexport enum BUTTON_TYPE_CLASSES {\n    base = 'base',\n    google = 'google-sign-in',\n    inverted = 'inverted',\n}\n\nconst getButton = (\n    buttonType = BUTTON_TYPE_CLASSES.base\n): typeof BaseButton | typeof GoogleSignInButton | typeof InvertedButton =>\n    ({\n        [BUTTON_TYPE_CLASSES.base]: BaseButton,\n        [BUTTON_TYPE_CLASSES.google]: GoogleSignInButton,\n        [BUTTON_TYPE_CLASSES.inverted]: InvertedButton,\n    }[buttonType]);\n\nexport type ButtonProps = {\n    buttonType?: BUTTON_TYPE_CLASSES;\n    isLoading?: boolean;\n} & ButtonHTMLAttributes<HTMLButtonElement>;\n\nconst Button: FC<ButtonProps> = ({\n    children,\n    buttonType,\n    isLoading,\n    ...otherProps\n}) => {\n    const CustomButton = getButton(buttonType);\n    return (\n        <CustomButton disabled={isLoading} {...otherProps}>\n            {isLoading ? <ButtonSpinner /> : children}\n        </CustomButton>\n    );\n};\n\nexport default Button;\n","import styled from 'styled-components';\n\nimport { SpinnerContainer } from '../spinner/spinner.styles';\n\nexport const BaseButton = styled.button`\n  min-width: 165px;\n  width: auto;\n  height: 50px;\n  letter-spacing: 0.5px;\n  line-height: 50px;\n  padding: 0 35px 0 35px;\n  font-size: 15px;\n  background-color: black;\n  color: white;\n  text-transform: uppercase;\n  font-family: 'Open Sans Condensed';\n  font-weight: bolder;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &:hover {\n    background-color: white;\n    color: black;\n    border: 1px solid black;\n  }\n`;\n\nexport const GoogleSignInButton = styled(BaseButton)`\n  background-color: #4285f4;\n  color: white;\n\n  &:hover {\n    background-color: #357ae8;\n    border: none;\n  }\n`;\n\nexport const InvertedButton = styled(BaseButton)`\n  background-color: white;\n  color: black;\n  border: 1px solid black;\n\n  &:hover {\n    background-color: black;\n    color: white;\n    border: none;\n  }\n`;\n\nexport const ButtonSpinner = styled(SpinnerContainer)`\n  width: 30px;\n  height: 30px;\n`;\n","import styled, { css } from 'styled-components';\n\nconst subColor = 'grey';\nconst mainColor = 'black';\n\nconst shrinkLabelStyles = css`\n  top: -14px;\n  font-size: 12px;\n  color: ${mainColor};\n`;\n\ntype FormInputLabelProps = {\n  shrink?: boolean;\n};\n\nexport const FormInputLabel = styled.label<FormInputLabelProps>`\n  color: ${subColor};\n  font-size: 16px;\n  font-weight: normal;\n  position: absolute;\n  pointer-events: none;\n  left: 5px;\n  top: 10px;\n  transition: 300ms ease all;\n  ${({ shrink }) => shrink && shrinkLabelStyles};\n`;\n\nexport const Input = styled.input`\n  background: none;\n  background-color: white;\n  color: ${subColor};\n  font-size: 18px;\n  padding: 10px 10px 10px 5px;\n  display: block;\n  width: 100%;\n  border: none;\n  border-radius: 0;\n  border-bottom: 1px solid ${subColor};\n  margin: 25px 0;\n\n  &:focus {\n    outline: none;\n  }\n\n  &:focus ~ ${FormInputLabel} {\n    ${shrinkLabelStyles};\n  }\n`;\n\nexport const Group = styled.div`\n  position: relative;\n  margin: 45px 0;\n\n  input[type='password'] {\n    letter-spacing: 0.3em;\n  }\n`;\n","import { InputHTMLAttributes, FC } from 'react';\n\nimport { FormInputLabel, Input, Group } from './form-input.styles';\n\ntype FormInputProps = { label: string } & InputHTMLAttributes<HTMLInputElement>;\n\nconst FormInput: FC<FormInputProps> = ({ label, ...otherProps }) => {\n  return (\n    <Group>\n      <Input {...otherProps} />\n      {label && (\n        <FormInputLabel\n          shrink={Boolean(\n            otherProps.value &&\n              typeof otherProps.value === 'string' &&\n              otherProps.value.length\n          )}\n        >\n          {label}\n        </FormInputLabel>\n      )}\n    </Group>\n  );\n};\n\nexport default FormInput;\n","import styled from 'styled-components';\n\nexport const SignUpContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 380px;\n\n  h2 {\n    margin: 10px 0;\n  }\n`;\n","import { useState, FormEvent, ChangeEvent } from 'react';\nimport { AuthError, AuthErrorCodes } from 'firebase/auth';\nimport { useDispatch } from 'react-redux';\n\nimport FormInput from '../form-input/form-input.component';\nimport Button from '../button/button.component';\n\nimport { SignUpContainer } from './sign-up-form.styles';\nimport { signUpStart } from '../../store/user/user.action';\n\nconst defaultFormFields = {\n  displayName: '',\n  email: '',\n  password: '',\n  confirmPassword: '',\n};\n\nconst SignUpForm = () => {\n  const [formFields, setFormFields] = useState(defaultFormFields);\n  const { displayName, email, password, confirmPassword } = formFields;\n  const dispatch = useDispatch();\n\n  const resetFormFields = () => {\n    setFormFields(defaultFormFields);\n  };\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (password !== confirmPassword) {\n      alert('passwords do not match');\n      return;\n    }\n\n    try {\n      dispatch(signUpStart(email, password, displayName));\n      resetFormFields();\n    } catch (error) {\n      if ((error as AuthError).code === AuthErrorCodes.EMAIL_EXISTS) {\n        alert('Cannot create user, email already in use');\n      } else {\n        console.log('user creation encountered an error', error);\n      }\n    }\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    setFormFields({ ...formFields, [name]: value });\n  };\n\n  return (\n    <SignUpContainer>\n      <h2>Don't have an account?</h2>\n      <span>Sign up with your email and password</span>\n      <form onSubmit={handleSubmit}>\n        <FormInput\n          label='Display Name'\n          type='text'\n          required\n          onChange={handleChange}\n          name='displayName'\n          value={displayName}\n        />\n\n        <FormInput\n          label='Email'\n          type='email'\n          required\n          onChange={handleChange}\n          name='email'\n          value={email}\n        />\n\n        <FormInput\n          label='Password'\n          type='password'\n          required\n          onChange={handleChange}\n          name='password'\n          value={password}\n        />\n\n        <FormInput\n          label='Confirm Password'\n          type='password'\n          required\n          onChange={handleChange}\n          name='confirmPassword'\n          value={confirmPassword}\n        />\n        <Button type='submit'>Sign Up</Button>\n      </form>\n    </SignUpContainer>\n  );\n};\n\nexport default SignUpForm;\n","import styled from 'styled-components';\n\nexport const SignInContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 380px;\n\n  h2 {\n    margin: 10px 0;\n  }\n`;\n\nexport const ButtonsContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n","import { useState, FormEvent, ChangeEvent } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport FormInput from '../form-input/form-input.component';\nimport Button, { BUTTON_TYPE_CLASSES } from '../button/button.component';\n\nimport { SignInContainer, ButtonsContainer } from './sign-in-form.styles';\nimport {\n  googleSignInStart,\n  emailSignInStart,\n} from '../../store/user/user.action';\n\nconst defaultFormFields = {\n  email: '',\n  password: '',\n};\n\nconst SignInForm = () => {\n  const dispatch = useDispatch();\n  const [formFields, setFormFields] = useState(defaultFormFields);\n  const { email, password } = formFields;\n\n  const resetFormFields = () => {\n    setFormFields(defaultFormFields);\n  };\n\n  const signInWithGoogle = async () => {\n    dispatch(googleSignInStart());\n  };\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    try {\n      dispatch(emailSignInStart(email, password));\n      resetFormFields();\n    } catch (error) {\n      console.log('user sign in failed', error);\n    }\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    setFormFields({ ...formFields, [name]: value });\n  };\n\n  return (\n    <SignInContainer>\n      <h2>Already have an account?</h2>\n      <span>Sign in with your email and password</span>\n      <form onSubmit={handleSubmit}>\n        <FormInput\n          label='Email'\n          type='email'\n          required\n          onChange={handleChange}\n          name='email'\n          value={email}\n        />\n\n        <FormInput\n          label='Password'\n          type='password'\n          required\n          onChange={handleChange}\n          name='password'\n          value={password}\n        />\n        <ButtonsContainer>\n          <Button type='submit'>Sign In</Button>\n          <Button\n            buttonType={BUTTON_TYPE_CLASSES.google}\n            type='button'\n            onClick={signInWithGoogle}\n          >\n            Sign In With Google\n          </Button>\n        </ButtonsContainer>\n      </form>\n    </SignInContainer>\n  );\n};\n\nexport default SignInForm;\n","import styled from 'styled-components';\n\nexport const AuthenticationContainer = styled.div`\n  display: flex;\n  width: 900px;\n  justify-content: space-between;\n  margin: 30px auto;\n`;\n","import SignUpForm from '../../components/sign-up-form/sign-up-form.component';\nimport SignInForm from '../../components/sign-in-form/sign-in-form.component';\n\nimport { AuthenticationContainer } from './authentication.styles';\n\nconst Authentication = () => {\n  return (\n    <AuthenticationContainer>\n      <SignInForm />\n      <SignUpForm />\n    </AuthenticationContainer>\n  );\n};\n\nexport default Authentication;\n"],"names":["BUTTON_TYPE_CLASSES","_ref","children","buttonType","isLoading","otherProps","CustomButton","arguments","length","undefined","base","BaseButton","google","GoogleSignInButton","inverted","InvertedButton","getButton","_jsx","disabled","ButtonSpinner","styled","SpinnerContainer","subColor","shrinkLabelStyles","css","FormInputLabel","shrink","Input","Group","label","_jsxs","Boolean","value","SignUpContainer","defaultFormFields","displayName","email","password","confirmPassword","SignUpForm","formFields","setFormFields","useState","dispatch","useDispatch","handleChange","event","name","target","onSubmit","async","preventDefault","signUpStart","error","code","AuthErrorCodes","alert","console","log","FormInput","type","required","onChange","Button","SignInContainer","ButtonsContainer","SignInForm","emailSignInStart","onClick","googleSignInStart","AuthenticationContainer","Authentication"],"sourceRoot":""}