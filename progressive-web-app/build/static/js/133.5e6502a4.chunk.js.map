{"version":3,"file":"static/js/133.5e6502a4.chunk.js","mappings":"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","sources":["components/button/button.component.tsx","components/button/button.styles.tsx","store/categories/category.selector.ts","components/product-card/product-card.styles.tsx","components/product-card/product-card.component.tsx","components/category-preview/category-preview.styles.tsx","components/category-preview/category-preview.component.tsx","routes/categories-preview/categories-preview.component.tsx","routes/category/category.styles.tsx","routes/category/category.component.tsx","routes/shop/shop.component.tsx","store/cart/cart.selector.ts"],"sourcesContent":["import { FC, ButtonHTMLAttributes } from 'react';\n\nimport {\n    BaseButton,\n    GoogleSignInButton,\n    InvertedButton,\n    ButtonSpinner,\n} from './button.styles';\n\nexport enum BUTTON_TYPE_CLASSES {\n    base = 'base',\n    google = 'google-sign-in',\n    inverted = 'inverted',\n}\n\nconst getButton = (\n    buttonType = BUTTON_TYPE_CLASSES.base\n): typeof BaseButton | typeof GoogleSignInButton | typeof InvertedButton =>\n    ({\n        [BUTTON_TYPE_CLASSES.base]: BaseButton,\n        [BUTTON_TYPE_CLASSES.google]: GoogleSignInButton,\n        [BUTTON_TYPE_CLASSES.inverted]: InvertedButton,\n    }[buttonType]);\n\nexport type ButtonProps = {\n    buttonType?: BUTTON_TYPE_CLASSES;\n    isLoading?: boolean;\n} & ButtonHTMLAttributes<HTMLButtonElement>;\n\nconst Button: FC<ButtonProps> = ({\n    children,\n    buttonType,\n    isLoading,\n    ...otherProps\n}) => {\n    const CustomButton = getButton(buttonType);\n    return (\n        <CustomButton disabled={isLoading} {...otherProps}>\n            {isLoading ? <ButtonSpinner /> : children}\n        </CustomButton>\n    );\n};\n\nexport default Button;\n","import styled from 'styled-components';\n\nimport { SpinnerContainer } from '../spinner/spinner.styles';\n\nexport const BaseButton = styled.button`\n  min-width: 165px;\n  width: auto;\n  height: 50px;\n  letter-spacing: 0.5px;\n  line-height: 50px;\n  padding: 0 35px 0 35px;\n  font-size: 15px;\n  background-color: black;\n  color: white;\n  text-transform: uppercase;\n  font-family: 'Open Sans Condensed';\n  font-weight: bolder;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &:hover {\n    background-color: white;\n    color: black;\n    border: 1px solid black;\n  }\n`;\n\nexport const GoogleSignInButton = styled(BaseButton)`\n  background-color: #4285f4;\n  color: white;\n\n  &:hover {\n    background-color: #357ae8;\n    border: none;\n  }\n`;\n\nexport const InvertedButton = styled(BaseButton)`\n  background-color: white;\n  color: black;\n  border: 1px solid black;\n\n  &:hover {\n    background-color: black;\n    color: white;\n    border: none;\n  }\n`;\n\nexport const ButtonSpinner = styled(SpinnerContainer)`\n  width: 30px;\n  height: 30px;\n`;\n","import { createSelector } from 'reselect';\n\nimport { RootState } from '../store';\nimport { CategoriesState } from './category.reducer';\nimport { CategoryMap } from './category.types';\n\nconst selectCategoryReducer = (state: RootState): CategoriesState =>\n  state.categories;\n\nexport const selectCategories = createSelector(\n  [selectCategoryReducer],\n  (categoriesSlice) => categoriesSlice.categories\n);\n\nexport const selectCategoriesMap = createSelector(\n  [selectCategories],\n  (categories): CategoryMap =>\n    categories.reduce((acc, category) => {\n      const { title, items } = category;\n      acc[title.toLowerCase()] = items;\n      return acc;\n    }, {} as CategoryMap)\n);\n\nexport const selectCategoriesIsLoading = createSelector(\n  [selectCategoryReducer],\n  (categoriesSlice) => categoriesSlice.isLoading\n);\n","import styled from 'styled-components';\n\nexport const ProductCartContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  height: 350px;\n  align-items: center;\n  position: relative;\n\n  img {\n    width: 100%;\n    height: 95%;\n    object-fit: cover;\n    margin-bottom: 5px;\n  }\n\n  button {\n    width: 80%;\n    opacity: 0.7;\n    position: absolute;\n    top: 255px;\n    display: none;\n  }\n\n  &:hover {\n    img {\n      opacity: 0.8;\n    }\n\n    button {\n      opacity: 0.85;\n      display: flex;\n    }\n  }\n`;\n\nexport const Footer = styled.div`\n  width: 100%;\n  height: 5%;\n  display: flex;\n  justify-content: space-between;\n  font-size: 18px;\n`;\n\nexport const Name = styled.span`\n  width: 90%;\n  margin-bottom: 15px;\n`;\n\nexport const Price = styled.span`\n  width: 10%;\n`;\n","import { FC } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectCartItems } from '../../store/cart/cart.selector';\nimport { addItemToCart } from '../../store/cart/cart.action';\nimport { CategoryItem } from '../../store/categories/category.types';\n\nimport Button, { BUTTON_TYPE_CLASSES } from '../button/button.component';\n\nimport {\n  ProductCartContainer,\n  Footer,\n  Name,\n  Price,\n} from './product-card.styles';\n\ntype ProductCardProps = {\n  product: CategoryItem;\n};\n\nconst ProductCard: FC<ProductCardProps> = ({ product }) => {\n  const { name, price, imageUrl } = product;\n  const dispatch = useDispatch();\n  const cartItems = useSelector(selectCartItems);\n\n  const addProductToCart = () => dispatch(addItemToCart(cartItems, product));\n\n  return (\n    <ProductCartContainer>\n      <img src={imageUrl} alt={`${name}`} />\n      <Footer>\n        <Name>{name}</Name>\n        <Price>{price}</Price>\n      </Footer>\n      <Button\n        buttonType={BUTTON_TYPE_CLASSES.inverted}\n        onClick={addProductToCart}\n      >\n        Add to card\n      </Button>\n    </ProductCartContainer>\n  );\n};\n\nexport default ProductCard;\n","import styled from 'styled-components';\n\nimport { Link } from 'react-router-dom';\n\nexport const CategoryPreviewContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 30px;\n`;\n\nexport const Title = styled(Link)`\n  font-size: 28px;\n  margin-bottom: 25px;\n  cursor: pointer;\n`;\n\nexport const Preview = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  column-gap: 20px;\n`;\n","import { FC } from 'react';\n\nimport ProductCard from '../product-card/product-card.component';\n\nimport {\n  CategoryPreviewContainer,\n  Title,\n  Preview,\n} from './category-preview.styles';\n\nimport { CategoryItem } from '../../store/categories/category.types';\n\ntype CategoryPreviewProps = {\n  title: string;\n  products: CategoryItem[];\n};\n\nconst CategoryPreview: FC<CategoryPreviewProps> = ({ title, products }) => {\n  return (\n    <CategoryPreviewContainer>\n      <h2>\n        <Title to={title}>{title.toUpperCase()}</Title>\n      </h2>\n      <Preview>\n        {products\n          .filter((_, idx) => idx < 4)\n          .map((product) => (\n            <ProductCard key={product.id} product={product} />\n          ))}\n      </Preview>\n    </CategoryPreviewContainer>\n  );\n};\n\nexport default CategoryPreview;\n","import { Fragment } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport {\n  selectCategoriesMap,\n  selectCategoriesIsLoading,\n} from '../../store/categories/category.selector';\n\nimport CategoryPreview from '../../components/category-preview/category-preview.component';\nimport Spinner from '../../components/spinner/spinner.component';\n\nconst CategoriesPreview = () => {\n  const categoriesMap = useSelector(selectCategoriesMap);\n  const isLoading = useSelector(selectCategoriesIsLoading);\n\n  return (\n    <Fragment>\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        Object.keys(categoriesMap).map((title) => {\n          const products = categoriesMap[title];\n          return (\n            <CategoryPreview key={title} title={title} products={products} />\n          );\n        })\n      )}\n    </Fragment>\n  );\n};\n\nexport default CategoriesPreview;\n","import styled from 'styled-components';\n\nexport const CategoryContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  column-gap: 20px;\n  row-gap: 50px;\n`;\n\nexport const Title = styled.h2`\n  font-size: 38px;\n  margin-bottom: 25px;\n  text-align: center;\n`;\n","import { useState, useEffect, Fragment } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport ProductCard from '../../components/product-card/product-card.component';\nimport Spinner from '../../components/spinner/spinner.component';\n\nimport {\n  selectCategoriesMap,\n  selectCategoriesIsLoading,\n} from '../../store/categories/category.selector';\n\nimport { CategoryContainer, Title } from './category.styles';\n\ntype CategoryRouteParams = {\n  category: string;\n};\n\nconst Category = () => {\n  const { category } = useParams<\n    keyof CategoryRouteParams\n  >() as CategoryRouteParams;\n  const categoriesMap = useSelector(selectCategoriesMap);\n  const isLoading = useSelector(selectCategoriesIsLoading);\n  const [products, setProducts] = useState(categoriesMap[category]);\n\n  useEffect(() => {\n    setProducts(categoriesMap[category]);\n  }, [category, categoriesMap]);\n\n  return (\n    <Fragment>\n      <Title>{category.toUpperCase()}</Title>\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        <CategoryContainer>\n          {products &&\n            products.map((product) => (\n              <ProductCard key={product.id} product={product} />\n            ))}\n        </CategoryContainer>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Category;\n","import { useEffect } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n\nimport CategoriesPreview from '../categories-preview/categories-preview.component';\nimport Category from '../category/category.component';\nimport { fetchCategoriesStart } from '../../store/categories/category.action';\n\nconst Shop = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchCategoriesStart());\n    }, [dispatch]);\n\n    return (\n        <Routes>\n            <Route index element={<CategoriesPreview />} />\n            <Route path=':category' element={<Category />} />\n        </Routes>\n    );\n};\n\nexport default Shop;\n","import { createSelector } from 'reselect';\n\nimport { RootState } from '../store';\n\nimport { CartState } from './cart.reducer';\n\nconst selectCartReducer = (state: RootState): CartState => state.cart;\n\nexport const selectCartItems = createSelector(\n  [selectCartReducer],\n  (cart) => cart.cartItems\n);\n\nexport const selectIsCartOpen = createSelector(\n  [selectCartReducer],\n  (cart) => cart.isCartOpen\n);\n\nexport const selectCartCount = createSelector([selectCartItems], (cartItems) =>\n  cartItems.reduce((total, cartItem) => total + cartItem.quantity, 0)\n);\n\nexport const selectCartTotal = createSelector([selectCartItems], (cartItems) =>\n  cartItems.reduce(\n    (total, cartItem) => total + cartItem.quantity * cartItem.price,\n    0\n  )\n);\n"],"names":["BUTTON_TYPE_CLASSES","_ref","children","buttonType","isLoading","otherProps","CustomButton","arguments","length","undefined","base","BaseButton","google","GoogleSignInButton","inverted","InvertedButton","getButton","_jsx","disabled","ButtonSpinner","styled","SpinnerContainer","selectCategoryReducer","state","categories","selectCategories","createSelector","categoriesSlice","selectCategoriesMap","reduce","acc","category","title","items","toLowerCase","selectCategoriesIsLoading","ProductCartContainer","Footer","Name","Price","product","name","price","imageUrl","dispatch","useDispatch","cartItems","useSelector","selectCartItems","_jsxs","src","alt","Button","onClick","addProductToCart","addItemToCart","CategoryPreviewContainer","Title","Link","Preview","products","to","toUpperCase","filter","_","idx","map","ProductCard","id","CategoriesPreview","categoriesMap","Fragment","Spinner","Object","keys","CategoryPreview","CategoryContainer","Category","useParams","setProducts","useState","useEffect","Shop","fetchCategoriesStart","Routes","Route","index","element","path","selectCartReducer","cart","selectIsCartOpen","isCartOpen","selectCartCount","total","cartItem","quantity","selectCartTotal"],"sourceRoot":""}