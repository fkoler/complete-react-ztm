{"version":3,"file":"static/js/147.b84adf46.chunk.js","mappings":"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","sources":["components/button/button.component.tsx","components/button/button.styles.tsx","components/checkout-item/checkout-item.styles.tsx","components/checkout-item/checkout-item.component.tsx","components/payment-form/payment-form.styles.tsx","components/payment-form/payment-form.component.tsx","routes/checkout/checkout.styles.tsx","routes/checkout/checkout.component.tsx","store/cart/cart.selector.ts","store/user/user.selector.ts"],"sourcesContent":["import { FC, ButtonHTMLAttributes } from 'react';\n\nimport {\n    BaseButton,\n    GoogleSignInButton,\n    InvertedButton,\n    ButtonSpinner,\n} from './button.styles';\n\nexport enum BUTTON_TYPE_CLASSES {\n    base = 'base',\n    google = 'google-sign-in',\n    inverted = 'inverted',\n}\n\nconst getButton = (\n    buttonType = BUTTON_TYPE_CLASSES.base\n): typeof BaseButton | typeof GoogleSignInButton | typeof InvertedButton =>\n    ({\n        [BUTTON_TYPE_CLASSES.base]: BaseButton,\n        [BUTTON_TYPE_CLASSES.google]: GoogleSignInButton,\n        [BUTTON_TYPE_CLASSES.inverted]: InvertedButton,\n    }[buttonType]);\n\nexport type ButtonProps = {\n    buttonType?: BUTTON_TYPE_CLASSES;\n    isLoading?: boolean;\n} & ButtonHTMLAttributes<HTMLButtonElement>;\n\nconst Button: FC<ButtonProps> = ({\n    children,\n    buttonType,\n    isLoading,\n    ...otherProps\n}) => {\n    const CustomButton = getButton(buttonType);\n    return (\n        <CustomButton disabled={isLoading} {...otherProps}>\n            {isLoading ? <ButtonSpinner /> : children}\n        </CustomButton>\n    );\n};\n\nexport default Button;\n","import styled from 'styled-components';\n\nimport { SpinnerContainer } from '../spinner/spinner.styles';\n\nexport const BaseButton = styled.button`\n  min-width: 165px;\n  width: auto;\n  height: 50px;\n  letter-spacing: 0.5px;\n  line-height: 50px;\n  padding: 0 35px 0 35px;\n  font-size: 15px;\n  background-color: black;\n  color: white;\n  text-transform: uppercase;\n  font-family: 'Open Sans Condensed';\n  font-weight: bolder;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &:hover {\n    background-color: white;\n    color: black;\n    border: 1px solid black;\n  }\n`;\n\nexport const GoogleSignInButton = styled(BaseButton)`\n  background-color: #4285f4;\n  color: white;\n\n  &:hover {\n    background-color: #357ae8;\n    border: none;\n  }\n`;\n\nexport const InvertedButton = styled(BaseButton)`\n  background-color: white;\n  color: black;\n  border: 1px solid black;\n\n  &:hover {\n    background-color: black;\n    color: white;\n    border: none;\n  }\n`;\n\nexport const ButtonSpinner = styled(SpinnerContainer)`\n  width: 30px;\n  height: 30px;\n`;\n","import styled from 'styled-components';\n\nexport const CheckoutItemContainer = styled.div`\n  width: 100%;\n  display: flex;\n  min-height: 100px;\n  border-bottom: 1px solid darkgrey;\n  padding: 15px 0;\n  font-size: 20px;\n  align-items: center;\n`;\n\nexport const ImageContainer = styled.div`\n  width: 23%;\n  padding-right: 15px;\n\n  img {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nexport const BaseSpan = styled.span`\n  width: 23%;\n`;\n\nexport const Quantity = styled(BaseSpan)`\n  display: flex;\n`;\n\nexport const Arrow = styled.div`\n  cursor: pointer;\n`;\n\nexport const Value = styled.span`\n  margin: 0 10px;\n`;\n\nexport const RemoveButton = styled.div`\n  padding-left: 12px;\n  cursor: pointer;\n`;\n","import { FC, memo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { selectCartItems } from '../../store/cart/cart.selector';\nimport {\n  addItemToCart,\n  clearItemFromCart,\n  removeItemFromCart,\n} from '../../store/cart/cart.action';\n\nimport {\n  CheckoutItemContainer,\n  ImageContainer,\n  BaseSpan,\n  Quantity,\n  Arrow,\n  Value,\n  RemoveButton,\n} from './checkout-item.styles';\n\nimport { CartItem } from '../../store/cart/cart.types';\n\ntype CheckoutItemProps = {\n  cartItem: CartItem;\n};\n\nconst CheckoutItem: FC<CheckoutItemProps> = memo(({ cartItem }) => {\n  const { name, imageUrl, price, quantity } = cartItem;\n  const cartItems = useSelector(selectCartItems);\n  const dispatch = useDispatch();\n\n  const clearItemHandler = () =>\n    dispatch(clearItemFromCart(cartItems, cartItem));\n  const addItemHandler = () => dispatch(addItemToCart(cartItems, cartItem));\n  const removeItemHandler = () =>\n    dispatch(removeItemFromCart(cartItems, cartItem));\n\n  return (\n    <CheckoutItemContainer>\n      <ImageContainer>\n        <img src={imageUrl} alt={`${name}`} />\n      </ImageContainer>\n      <BaseSpan> {name} </BaseSpan>\n      <Quantity>\n        <Arrow onClick={removeItemHandler}>&#10094;</Arrow>\n        <Value>{quantity}</Value>\n        <Arrow onClick={addItemHandler}>&#10095;</Arrow>\n      </Quantity>\n      <BaseSpan> {price}</BaseSpan>\n      <RemoveButton onClick={clearItemHandler}>&#10005;</RemoveButton>\n    </CheckoutItemContainer>\n  );\n});\n\nexport default CheckoutItem;\n","import styled from 'styled-components';\nimport Button from '../button/button.component';\n\nexport const PaymentFormContainer = styled.div`\n  height: 300px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const FormContainer = styled.form`\n  height: 100px;\n  min-width: 500px;\n`;\n\nexport const PaymentButton = styled(Button)`\n  margin-left: auto;\n  margin-top: 30px;\n`;\n","import { useState, FormEvent } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { StripeCardElement } from '@stripe/stripe-js';\nimport { useSelector } from 'react-redux';\n\nimport { selectCartTotal } from '../../store/cart/cart.selector';\nimport { selectCurrentUser } from '../../store/user/user.selector';\n\nimport { BUTTON_TYPE_CLASSES } from '../button/button.component';\n\nimport {\n  PaymentFormContainer,\n  FormContainer,\n  PaymentButton,\n} from './payment-form.styles';\n\nconst ifValidCardElement = (\n  card: StripeCardElement | null\n): card is StripeCardElement => card !== null;\n\nconst PaymentForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const amount = useSelector(selectCartTotal);\n  const currentUser = useSelector(selectCurrentUser);\n  const [isProcessingPayment, setIsProcessingPayment] = useState(false);\n\n  const paymentHandler = async (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessingPayment(true);\n\n    const response = await fetch('/.netlify/functions/create-payment-intent', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ amount: amount * 100 }),\n    }).then((res) => res.json());\n\n    const {\n      paymentIntent: { client_secret },\n    } = response;\n\n    const cardDetails = elements.getElement(CardElement);\n\n    if (!ifValidCardElement(cardDetails)) return;\n\n    const paymentResult = await stripe.confirmCardPayment(client_secret, {\n      payment_method: {\n        card: cardDetails,\n        billing_details: {\n          name: currentUser ? currentUser.displayName : 'Guest',\n        },\n      },\n    });\n\n    setIsProcessingPayment(false);\n\n    if (paymentResult.error) {\n      alert(paymentResult.error);\n    } else {\n      if (paymentResult.paymentIntent.status === 'succeeded') {\n        alert('Payment Successful');\n      }\n    }\n  };\n\n  return (\n    <PaymentFormContainer>\n      <FormContainer onSubmit={paymentHandler}>\n        <h2>Credit Card Payment: </h2>\n        <CardElement />\n        <PaymentButton\n          isLoading={isProcessingPayment}\n          buttonType={BUTTON_TYPE_CLASSES.inverted}\n        >\n          Pay now\n        </PaymentButton>\n      </FormContainer>\n    </PaymentFormContainer>\n  );\n};\n\nexport default PaymentForm;\n","import styled from 'styled-components';\n\nexport const CheckoutContainer = styled.div`\n  width: 55%;\n  min-height: 90vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 50px auto 0;\n`;\n\nexport const CheckoutHeader = styled.div`\n  width: 100%;\n  padding: 10px 0;\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 1px solid darkgrey;\n`;\n\nexport const HeaderBlock = styled.div`\n  text-transform: capitalize;\n  width: 23%;\n\n  &:last-child {\n    width: 8%;\n  }\n`;\n\nexport const Total = styled.span`\n  margin-top: 30px;\n  margin-left: auto;\n  font-size: 36px;\n`;\n","import { useSelector } from 'react-redux';\n\nimport {\n  selectCartItems,\n  selectCartTotal,\n} from '../../store/cart/cart.selector';\n\nimport CheckoutItem from '../../components/checkout-item/checkout-item.component';\nimport PaymentForm from '../../components/payment-form/payment-form.component';\n\nimport {\n  CheckoutContainer,\n  CheckoutHeader,\n  HeaderBlock,\n  Total,\n} from './checkout.styles';\n\nconst Checkout = () => {\n  const cartItems = useSelector(selectCartItems);\n  const cartTotal = useSelector(selectCartTotal);\n\n  return (\n    <CheckoutContainer>\n      <CheckoutHeader>\n        <HeaderBlock>\n          <span>Product</span>\n        </HeaderBlock>\n        <HeaderBlock>\n          <span>Description</span>\n        </HeaderBlock>\n        <HeaderBlock>\n          <span>Quantity</span>\n        </HeaderBlock>\n        <HeaderBlock>\n          <span>Price</span>\n        </HeaderBlock>\n        <HeaderBlock>\n          <span>Remove</span>\n        </HeaderBlock>\n      </CheckoutHeader>\n      {cartItems.map((cartItem) => (\n        <CheckoutItem key={cartItem.id} cartItem={cartItem} />\n      ))}\n      <Total>Total: ${cartTotal}</Total>\n      <PaymentForm />\n    </CheckoutContainer>\n  );\n};\n\nexport default Checkout;\n","import { createSelector } from 'reselect';\n\nimport { RootState } from '../store';\n\nimport { CartState } from './cart.reducer';\n\nconst selectCartReducer = (state: RootState): CartState => state.cart;\n\nexport const selectCartItems = createSelector(\n  [selectCartReducer],\n  (cart) => cart.cartItems\n);\n\nexport const selectIsCartOpen = createSelector(\n  [selectCartReducer],\n  (cart) => cart.isCartOpen\n);\n\nexport const selectCartCount = createSelector([selectCartItems], (cartItems) =>\n  cartItems.reduce((total, cartItem) => total + cartItem.quantity, 0)\n);\n\nexport const selectCartTotal = createSelector([selectCartItems], (cartItems) =>\n  cartItems.reduce(\n    (total, cartItem) => total + cartItem.quantity * cartItem.price,\n    0\n  )\n);\n","import { createSelector } from 'reselect';\n\nimport { RootState } from '../store';\n\nimport { UserState } from './user.reducer';\n\nexport const selectUserReducer = (state: RootState): UserState => state.user;\n\nexport const selectCurrentUser = createSelector(\n  selectUserReducer,\n  (user) => user.currentUser\n);\n"],"names":["BUTTON_TYPE_CLASSES","_ref","children","buttonType","isLoading","otherProps","CustomButton","arguments","length","undefined","base","BaseButton","google","GoogleSignInButton","inverted","InvertedButton","getButton","_jsx","disabled","ButtonSpinner","styled","SpinnerContainer","CheckoutItemContainer","ImageContainer","BaseSpan","Quantity","Arrow","Value","RemoveButton","memo","cartItem","name","imageUrl","price","quantity","cartItems","useSelector","selectCartItems","dispatch","useDispatch","_jsxs","src","alt","onClick","removeItemHandler","removeItemFromCart","addItemHandler","addItemToCart","clearItemHandler","clearItemFromCart","PaymentFormContainer","FormContainer","PaymentButton","Button","PaymentForm","stripe","useStripe","elements","useElements","amount","selectCartTotal","currentUser","selectCurrentUser","isProcessingPayment","setIsProcessingPayment","useState","onSubmit","async","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","then","res","json","paymentIntent","client_secret","cardDetails","getElement","CardElement","paymentResult","confirmCardPayment","payment_method","card","billing_details","displayName","error","alert","status","CheckoutContainer","CheckoutHeader","HeaderBlock","Total","Checkout","cartTotal","map","CheckoutItem","id","selectCartReducer","state","cart","createSelector","selectIsCartOpen","isCartOpen","selectCartCount","reduce","total","user"],"sourceRoot":""}